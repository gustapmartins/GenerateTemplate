name: CI with Docker

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  # Test:
  #   runs-on: ubuntu-latest
  #   continue-on-error: false
  #   steps:
  #     - name: Checkout Repository
  #       uses: actions/checkout@v4

  #     - name: Install PowerShell
  #       run: sudo apt-get install -y powershell

  #     - name: Run Async Method Validation
  #       run: pwsh -File .github/scripts/validate-async.ps1
  #       continue-on-error: false  # Falha o workflow se erros forem encontrados no script

  #     - name: Run StyleCop
  #       run: dotnet build GenerateTemplate.sln /p:RunAnalyzersDuringBuild=true

  #     - uses: actions/setup-dotnet@v4
  #       with:
  #         dotnet-version: '8.0.x'
          
  #     - name: Restore Dependencies
  #       run: dotnet restore GenerateTemplate.sln

  #     - run: dotnet build GenerateTemplate.sln -c Release -o ./app/build

  #     - run: dotnet test GenerateTemplate.sln --p:CollectCoverage=true --collect:"Xplat Code Coverage" --results-directory ./TestResults

  #     - name: Code Coverage Report
  #       uses: irongut/CodeCoverageSummary@v1.3.0
  #       with:
  #         filename: TestResults/**/coverage.cobertura.xml
  #         badge: true
  #         fail_below_min: true
  #         format: markdown
  #         hide_branch_rate: false
  #         hide_complexity: true
  #         indicators: true
  #         output: both
  #         thresholds: '10 20'

  #     - name: StyleCop Analysis
  #       run: dotnet build GenerateTemplate.sln --no-incremental -p:GenerateDocumentationFile=true 

  # Build:
  #   runs-on: ubuntu-latest
  #   needs: Test
  #   steps:
  #     - name: Build the project
  #       uses: actions/checkout@v4

  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v2

  #     - name: Cache Docker Layers
  #       uses: actions/cache@v2
  #       with:
  #         path: /tmp/.docker-cache
  #         key: ${{ runner.os }}-docker-${{ github.sha }}
  #         restore-keys: |
  #           ${{ runner.os }}-docker-

  #     - name: Build Docker Image
  #       run: docker build --tag GenerateTemplate/application:latest -f GenerateTemplate.Application/Dockerfile .
  #       env:
  #         DOCKER_BUILDKIT: 1

  #     - name: Clean Up Docker Images
  #       run: docker rmi GenerateTemplate/application:latest

  Validator:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore Dependencies
        run: dotnet restore GenerateTemplate.Application/GenerateTemplate.Application.csproj

      - name: Run Code Analysis
        run: dotnet build GenerateTemplate.Application/GenerateTemplate.Application.csproj /p:EnableCodeAnalysis=true /p:RunAnalyzersDuringBuild=true

      - name: Verify version change
        run: |
          VERSION=$(find . -name "*.csproj" -exec grep -oP "(?<=<Version>)[^<]+" {} \;)
          echo "Current Version: $VERSION"
          
          # Busca a branch main remotamente sem sobrescrever a local
          git fetch origin main
          
          # Obtém a versão da branch main remota
          OLD_VERSION=$(git show origin/main:**/*.csproj | grep -oPm1 "(?<=<Version>)[^<]+")
          echo "Old Version: $OLD_VERSION"
          
          # Compara as versões
          if [ "$VERSION" == "$OLD_VERSION" ]; then
            echo "❌ Version not updated. Update the version in the .csproj file."
            exit 1
          fi

      - name: Upload Validator Results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: validator-results
          path: bin/Debug/validator-results
